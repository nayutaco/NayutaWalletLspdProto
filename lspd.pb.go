// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: lspd.proto

package NayutaHub2LspdProto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IntegrityResult int32

const (
	IntegrityResult_INTEGRITYRESULT_NONE IntegrityResult = 0
	IntegrityResult_INTEGRITYRESULT_OK   IntegrityResult = 1
	IntegrityResult_INTEGRITYRESULT_NG   IntegrityResult = 2
)

// Enum value maps for IntegrityResult.
var (
	IntegrityResult_name = map[int32]string{
		0: "INTEGRITYRESULT_NONE",
		1: "INTEGRITYRESULT_OK",
		2: "INTEGRITYRESULT_NG",
	}
	IntegrityResult_value = map[string]int32{
		"INTEGRITYRESULT_NONE": 0,
		"INTEGRITYRESULT_OK":   1,
		"INTEGRITYRESULT_NG":   2,
	}
)

func (x IntegrityResult) Enum() *IntegrityResult {
	p := new(IntegrityResult)
	*p = x
	return p
}

func (x IntegrityResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntegrityResult) Descriptor() protoreflect.EnumDescriptor {
	return file_lspd_proto_enumTypes[0].Descriptor()
}

func (IntegrityResult) Type() protoreflect.EnumType {
	return &file_lspd_proto_enumTypes[0]
}

func (x IntegrityResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntegrityResult.Descriptor instead.
func (IntegrityResult) EnumDescriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{0}
}

// level
type ReportRequest_ReportLevel int32

const (
	ReportRequest_REPORTLEVEL_NORMAL ReportRequest_ReportLevel = 0
	ReportRequest_REPORTLEVEL_NOTIFY ReportRequest_ReportLevel = 1
	ReportRequest_REPORTLEVEL_ALERT  ReportRequest_ReportLevel = 2
)

// Enum value maps for ReportRequest_ReportLevel.
var (
	ReportRequest_ReportLevel_name = map[int32]string{
		0: "REPORTLEVEL_NORMAL",
		1: "REPORTLEVEL_NOTIFY",
		2: "REPORTLEVEL_ALERT",
	}
	ReportRequest_ReportLevel_value = map[string]int32{
		"REPORTLEVEL_NORMAL": 0,
		"REPORTLEVEL_NOTIFY": 1,
		"REPORTLEVEL_ALERT":  2,
	}
)

func (x ReportRequest_ReportLevel) Enum() *ReportRequest_ReportLevel {
	p := new(ReportRequest_ReportLevel)
	*p = x
	return p
}

func (x ReportRequest_ReportLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportRequest_ReportLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_lspd_proto_enumTypes[1].Descriptor()
}

func (ReportRequest_ReportLevel) Type() protoreflect.EnumType {
	return &file_lspd_proto_enumTypes[1]
}

func (x ReportRequest_ReportLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportRequest_ReportLevel.Descriptor instead.
func (ReportRequest_ReportLevel) EnumDescriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{20, 0}
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce int32 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type PingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce int32 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *PingReply) Reset() {
	*x = PingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingReply) ProtoMessage() {}

func (x *PingReply) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingReply.ProtoReflect.Descriptor instead.
func (*PingReply) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{1}
}

func (x *PingReply) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type ChannelInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The identity pubkey of the Lightning node
	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *ChannelInformationRequest) Reset() {
	*x = ChannelInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInformationRequest) ProtoMessage() {}

func (x *ChannelInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInformationRequest.ProtoReflect.Descriptor instead.
func (*ChannelInformationRequest) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{2}
}

func (x *ChannelInformationRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

type ChannelInformationReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The name of of LSP
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	/// The identity pubkey of the Lightning node
	Pubkey string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	/// The network location of the lightning node, e.g. `12.34.56.78:9012` or
	/// `localhost:10011`
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	/// The base fee charged regardless of the number of milli-satoshis sent.
	BaseFeeMsat int64 `protobuf:"varint,6,opt,name=base_fee_msat,proto3" json:"base_fee_msat,omitempty"`
	/// The effective fee rate in milli-satoshis. The precision of this value goes
	/// up to 6 decimal places, so 1e-6.
	FeeRate float64 `protobuf:"fixed64,7,opt,name=fee_rate,proto3" json:"fee_rate,omitempty"`
	/// The required timelock delta for HTLCs forwarded over the channel.
	TimeLockDelta uint32 `protobuf:"varint,8,opt,name=time_lock_delta,proto3" json:"time_lock_delta,omitempty"`
	/// The feerate per 10000 sats(1/100 percent)
	ChannelFeePermyriad int64 `protobuf:"varint,10,opt,name=channel_fee_permyriad,json=channelFeePermyriad,proto3" json:"channel_fee_permyriad,omitempty"`
	/// LSP pubkey(not LN node_id).
	/// It uses for encoding `Encrypted.data` from remote peer.
	LspPubkey []byte `protobuf:"bytes,11,opt,name=lsp_pubkey,json=lspPubkey,proto3" json:"lsp_pubkey,omitempty"`
	/// The channel can be closed if not used this duration in seconds.
	MaxInactiveDuration int64 `protobuf:"varint,12,opt,name=max_inactive_duration,json=maxInactiveDuration,proto3" json:"max_inactive_duration,omitempty"`
	/// The minimum fee msat for On-The-Fly channel creation and Submarine Swap(not routing fee).
	ChannelMinimumFeeMsat int64 `protobuf:"varint,13,opt,name=channel_minimum_fee_msat,json=channelMinimumFeeMsat,proto3" json:"channel_minimum_fee_msat,omitempty"`
	/// LSP version
	Version string `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`
	/// Submarine Script version
	SwapScriptVersion int32 `protobuf:"varint,15,opt,name=swap_script_version,json=swapScriptVersion,proto3" json:"swap_script_version,omitempty"`
}

func (x *ChannelInformationReply) Reset() {
	*x = ChannelInformationReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInformationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInformationReply) ProtoMessage() {}

func (x *ChannelInformationReply) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInformationReply.ProtoReflect.Descriptor instead.
func (*ChannelInformationReply) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{3}
}

func (x *ChannelInformationReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelInformationReply) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *ChannelInformationReply) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ChannelInformationReply) GetBaseFeeMsat() int64 {
	if x != nil {
		return x.BaseFeeMsat
	}
	return 0
}

func (x *ChannelInformationReply) GetFeeRate() float64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *ChannelInformationReply) GetTimeLockDelta() uint32 {
	if x != nil {
		return x.TimeLockDelta
	}
	return 0
}

func (x *ChannelInformationReply) GetChannelFeePermyriad() int64 {
	if x != nil {
		return x.ChannelFeePermyriad
	}
	return 0
}

func (x *ChannelInformationReply) GetLspPubkey() []byte {
	if x != nil {
		return x.LspPubkey
	}
	return nil
}

func (x *ChannelInformationReply) GetMaxInactiveDuration() int64 {
	if x != nil {
		return x.MaxInactiveDuration
	}
	return 0
}

func (x *ChannelInformationReply) GetChannelMinimumFeeMsat() int64 {
	if x != nil {
		return x.ChannelMinimumFeeMsat
	}
	return 0
}

func (x *ChannelInformationReply) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ChannelInformationReply) GetSwapScriptVersion() int32 {
	if x != nil {
		return x.SwapScriptVersion
	}
	return 0
}

type OpenChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The identity pubkey of the Lightning node
	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *OpenChannelRequest) Reset() {
	*x = OpenChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenChannelRequest) ProtoMessage() {}

func (x *OpenChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenChannelRequest.ProtoReflect.Descriptor instead.
func (*OpenChannelRequest) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{4}
}

func (x *OpenChannelRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

type OpenChannelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The transaction hash
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,proto3" json:"tx_hash,omitempty"`
	/// The output index
	OutputIndex uint32 `protobuf:"varint,2,opt,name=output_index,proto3" json:"output_index,omitempty"`
}

func (x *OpenChannelReply) Reset() {
	*x = OpenChannelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenChannelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenChannelReply) ProtoMessage() {}

func (x *OpenChannelReply) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenChannelReply.ProtoReflect.Descriptor instead.
func (*OpenChannelReply) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{5}
}

func (x *OpenChannelReply) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *OpenChannelReply) GetOutputIndex() uint32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

type RegisterPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The encrypted `PaymentInformation` by LSP pubkey
	Blob []byte `protobuf:"bytes,3,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *RegisterPaymentRequest) Reset() {
	*x = RegisterPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPaymentRequest) ProtoMessage() {}

func (x *RegisterPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPaymentRequest.ProtoReflect.Descriptor instead.
func (*RegisterPaymentRequest) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterPaymentRequest) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

type RegisterPaymentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterPaymentReply) Reset() {
	*x = RegisterPaymentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPaymentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPaymentReply) ProtoMessage() {}

func (x *RegisterPaymentReply) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPaymentReply.ProtoReflect.Descriptor instead.
func (*RegisterPaymentReply) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{7}
}

type PaymentInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The payment hash to intercept forwarding HTLC
	PaymentHash []byte `protobuf:"bytes,1,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	/// The payment address.
	/// An optional payment addr to be included within the last hop of the route.
	PaymentSecret []byte `protobuf:"bytes,2,opt,name=payment_secret,json=paymentSecret,proto3" json:"payment_secret,omitempty"`
	/// The payee LND node_id
	Destination []byte `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	/// The incoming amount to LSP's LN node
	IncomingAmountMsat int64 `protobuf:"varint,4,opt,name=incoming_amount_msat,json=incomingAmountMsat,proto3" json:"incoming_amount_msat,omitempty"`
	/// The outgoing amount from LSP's LN node to payee
	OutgoingAmountMsat int64 `protobuf:"varint,5,opt,name=outgoing_amount_msat,json=outgoingAmountMsat,proto3" json:"outgoing_amount_msat,omitempty"`
}

func (x *PaymentInformation) Reset() {
	*x = PaymentInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentInformation) ProtoMessage() {}

func (x *PaymentInformation) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentInformation.ProtoReflect.Descriptor instead.
func (*PaymentInformation) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{8}
}

func (x *PaymentInformation) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *PaymentInformation) GetPaymentSecret() []byte {
	if x != nil {
		return x.PaymentSecret
	}
	return nil
}

func (x *PaymentInformation) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *PaymentInformation) GetIncomingAmountMsat() int64 {
	if x != nil {
		return x.IncomingAmountMsat
	}
	return 0
}

func (x *PaymentInformation) GetOutgoingAmountMsat() int64 {
	if x != nil {
		return x.OutgoingAmountMsat
	}
	return 0
}

type Encrypted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The encrypted data by LSP pubkey
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Encrypted) Reset() {
	*x = Encrypted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encrypted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encrypted) ProtoMessage() {}

func (x *Encrypted) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encrypted.ProtoReflect.Descriptor instead.
func (*Encrypted) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{9}
}

func (x *Encrypted) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RegisterSubmarineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The pubkey to encrypt response data(`RegisterSubmarineReply`)
	EncryptPubkey []byte `protobuf:"bytes,1,opt,name=encrypt_pubkey,json=encryptPubkey,proto3" json:"encrypt_pubkey,omitempty"`
	/// THe payment_hash for swap script and LN invoice
	PaymentHash []byte `protobuf:"bytes,2,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	/// The repayment pubkey for swap script
	RepayPubkey []byte `protobuf:"bytes,3,opt,name=repay_pubkey,json=repayPubkey,proto3" json:"repay_pubkey,omitempty"`
	/// The payee LN node_id
	Destination []byte `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	/// Supported submarine Script version
	SwapScriptVersion int32 `protobuf:"varint,5,opt,name=swap_script_version,json=swapScriptVersion,proto3" json:"swap_script_version,omitempty"`
}

func (x *RegisterSubmarineRequest) Reset() {
	*x = RegisterSubmarineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSubmarineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSubmarineRequest) ProtoMessage() {}

func (x *RegisterSubmarineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSubmarineRequest.ProtoReflect.Descriptor instead.
func (*RegisterSubmarineRequest) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{10}
}

func (x *RegisterSubmarineRequest) GetEncryptPubkey() []byte {
	if x != nil {
		return x.EncryptPubkey
	}
	return nil
}

func (x *RegisterSubmarineRequest) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *RegisterSubmarineRequest) GetRepayPubkey() []byte {
	if x != nil {
		return x.RepayPubkey
	}
	return nil
}

func (x *RegisterSubmarineRequest) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *RegisterSubmarineRequest) GetSwapScriptVersion() int32 {
	if x != nil {
		return x.SwapScriptVersion
	}
	return 0
}

type RegisterSubmarineReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// swap address
	ScriptAddress string `protobuf:"bytes,1,opt,name=script_address,json=scriptAddress,proto3" json:"script_address,omitempty"`
	/// The HTLC pubkey for swap script
	HtlcPubkey []byte `protobuf:"bytes,2,opt,name=htlc_pubkey,json=htlcPubkey,proto3" json:"htlc_pubkey,omitempty"`
}

func (x *RegisterSubmarineReply) Reset() {
	*x = RegisterSubmarineReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSubmarineReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSubmarineReply) ProtoMessage() {}

func (x *RegisterSubmarineReply) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSubmarineReply.ProtoReflect.Descriptor instead.
func (*RegisterSubmarineReply) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{11}
}

func (x *RegisterSubmarineReply) GetScriptAddress() string {
	if x != nil {
		return x.ScriptAddress
	}
	return ""
}

func (x *RegisterSubmarineReply) GetHtlcPubkey() []byte {
	if x != nil {
		return x.HtlcPubkey
	}
	return nil
}

type ReceiveSubmarineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// THe payment_hash to process Submarine Swap
	PaymentHash []byte `protobuf:"bytes,1,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	/// The LN invoice to send after open channel
	Invoice string `protobuf:"bytes,2,opt,name=invoice,proto3" json:"invoice,omitempty"`
}

func (x *ReceiveSubmarineRequest) Reset() {
	*x = ReceiveSubmarineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveSubmarineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveSubmarineRequest) ProtoMessage() {}

func (x *ReceiveSubmarineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveSubmarineRequest.ProtoReflect.Descriptor instead.
func (*ReceiveSubmarineRequest) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{12}
}

func (x *ReceiveSubmarineRequest) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *ReceiveSubmarineRequest) GetInvoice() string {
	if x != nil {
		return x.Invoice
	}
	return ""
}

type ReceiveSubmarineReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReceiveSubmarineReply) Reset() {
	*x = ReceiveSubmarineReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveSubmarineReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveSubmarineReply) ProtoMessage() {}

func (x *ReceiveSubmarineReply) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveSubmarineReply.ProtoReflect.Descriptor instead.
func (*ReceiveSubmarineReply) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{13}
}

type NodePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From []byte `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   []byte `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *NodePair) Reset() {
	*x = NodePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePair) ProtoMessage() {}

func (x *NodePair) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePair.ProtoReflect.Descriptor instead.
func (*NodePair) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{14}
}

func (x *NodePair) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *NodePair) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

type QueryRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The pubkey to encrypt response data(`QueryRouteReply`)
	EncryptPubkey []byte `protobuf:"bytes,1,opt,name=encrypt_pubkey,json=encryptPubkey,proto3" json:"encrypt_pubkey,omitempty"`
	/// The LN invoice to send after open channel
	Invoice string `protobuf:"bytes,2,opt,name=invoice,proto3" json:"invoice,omitempty"`
	/// The nodes to ignore routing
	IgnoredNodes [][]byte `protobuf:"bytes,3,rep,name=ignored_nodes,json=ignoredNodes,proto3" json:"ignored_nodes,omitempty"`
	/// The pairs to ignore routing
	IgnoredPairs []*NodePair `protobuf:"bytes,4,rep,name=ignored_pairs,json=ignoredPairs,proto3" json:"ignored_pairs,omitempty"`
	/// Specify amount if invoice not have amount(0: use `invoice` amount)
	Amount int64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *QueryRoutesRequest) Reset() {
	*x = QueryRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRoutesRequest) ProtoMessage() {}

func (x *QueryRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRoutesRequest.ProtoReflect.Descriptor instead.
func (*QueryRoutesRequest) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{15}
}

func (x *QueryRoutesRequest) GetEncryptPubkey() []byte {
	if x != nil {
		return x.EncryptPubkey
	}
	return nil
}

func (x *QueryRoutesRequest) GetInvoice() string {
	if x != nil {
		return x.Invoice
	}
	return ""
}

func (x *QueryRoutesRequest) GetIgnoredNodes() [][]byte {
	if x != nil {
		return x.IgnoredNodes
	}
	return nil
}

func (x *QueryRoutesRequest) GetIgnoredPairs() []*NodePair {
	if x != nil {
		return x.IgnoredPairs
	}
	return nil
}

func (x *QueryRoutesRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type GetTimeLockDeltaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID to request channel time_lock_delta value.
	ChanId uint64 `protobuf:"varint,1,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
}

func (x *GetTimeLockDeltaRequest) Reset() {
	*x = GetTimeLockDeltaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimeLockDeltaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeLockDeltaRequest) ProtoMessage() {}

func (x *GetTimeLockDeltaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeLockDeltaRequest.ProtoReflect.Descriptor instead.
func (*GetTimeLockDeltaRequest) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{16}
}

func (x *GetTimeLockDeltaRequest) GetChanId() uint64 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

type GetTimeLockDeltaReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// time_lock_delta value from hub routing policy
	TimeLockDeltaHub uint32 `protobuf:"varint,1,opt,name=time_lock_delta_hub,json=timeLockDeltaHub,proto3" json:"time_lock_delta_hub,omitempty"`
	// time_lock_delta value from another node routing policy
	TimeLockDeltaAnother uint32 `protobuf:"varint,2,opt,name=time_lock_delta_another,json=timeLockDeltaAnother,proto3" json:"time_lock_delta_another,omitempty"`
}

func (x *GetTimeLockDeltaReply) Reset() {
	*x = GetTimeLockDeltaReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimeLockDeltaReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeLockDeltaReply) ProtoMessage() {}

func (x *GetTimeLockDeltaReply) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeLockDeltaReply.ProtoReflect.Descriptor instead.
func (*GetTimeLockDeltaReply) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{17}
}

func (x *GetTimeLockDeltaReply) GetTimeLockDeltaHub() uint32 {
	if x != nil {
		return x.TimeLockDeltaHub
	}
	return 0
}

func (x *GetTimeLockDeltaReply) GetTimeLockDeltaAnother() uint32 {
	if x != nil {
		return x.TimeLockDeltaAnother
	}
	return 0
}

type RegisterUserInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mail address
	MailAddress string `protobuf:"bytes,1,opt,name=mail_address,json=mailAddress,proto3" json:"mail_address,omitempty"`
}

func (x *RegisterUserInfoRequest) Reset() {
	*x = RegisterUserInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserInfoRequest) ProtoMessage() {}

func (x *RegisterUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserInfoRequest.ProtoReflect.Descriptor instead.
func (*RegisterUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{18}
}

func (x *RegisterUserInfoRequest) GetMailAddress() string {
	if x != nil {
		return x.MailAddress
	}
	return ""
}

type RegisterUserInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterUserInfoReply) Reset() {
	*x = RegisterUserInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserInfoReply) ProtoMessage() {}

func (x *RegisterUserInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserInfoReply.ProtoReflect.Descriptor instead.
func (*RegisterUserInfoReply) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{19}
}

type ReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// category
	Category string                    `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Level    ReportRequest_ReportLevel `protobuf:"varint,2,opt,name=level,proto3,enum=lspd.ReportRequest_ReportLevel" json:"level,omitempty"`
	// message
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ReportRequest) Reset() {
	*x = ReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRequest) ProtoMessage() {}

func (x *ReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRequest.ProtoReflect.Descriptor instead.
func (*ReportRequest) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{20}
}

func (x *ReportRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ReportRequest) GetLevel() ReportRequest_ReportLevel {
	if x != nil {
		return x.Level
	}
	return ReportRequest_REPORTLEVEL_NORMAL
}

func (x *ReportRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ReportReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportReply) Reset() {
	*x = ReportReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportReply) ProtoMessage() {}

func (x *ReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportReply.ProtoReflect.Descriptor instead.
func (*ReportReply) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{21}
}

type IntegrityNonceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The pubkey to encrypt response data(`QueryRouteReply`)
	EncryptPubkey []byte `protobuf:"bytes,1,opt,name=encrypt_pubkey,json=encryptPubkey,proto3" json:"encrypt_pubkey,omitempty"`
	/// The identity pubkey of the Lightning node
	Pubkey []byte `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	/// The model -dependent ID
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IntegrityNonceRequest) Reset() {
	*x = IntegrityNonceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrityNonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrityNonceRequest) ProtoMessage() {}

func (x *IntegrityNonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrityNonceRequest.ProtoReflect.Descriptor instead.
func (*IntegrityNonceRequest) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{22}
}

func (x *IntegrityNonceRequest) GetEncryptPubkey() []byte {
	if x != nil {
		return x.EncryptPubkey
	}
	return nil
}

func (x *IntegrityNonceRequest) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *IntegrityNonceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type IntegrityNonceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The nonce for Integrity API
	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *IntegrityNonceReply) Reset() {
	*x = IntegrityNonceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrityNonceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrityNonceReply) ProtoMessage() {}

func (x *IntegrityNonceReply) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrityNonceReply.ProtoReflect.Descriptor instead.
func (*IntegrityNonceReply) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{23}
}

func (x *IntegrityNonceReply) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type IntegrityVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The identity pubkey of the Lightning node
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// Integrity token(empty string: return previous result if exist)
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	/// The model -dependent ID
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IntegrityVerifyRequest) Reset() {
	*x = IntegrityVerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrityVerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrityVerifyRequest) ProtoMessage() {}

func (x *IntegrityVerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrityVerifyRequest.ProtoReflect.Descriptor instead.
func (*IntegrityVerifyRequest) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{24}
}

func (x *IntegrityVerifyRequest) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *IntegrityVerifyRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *IntegrityVerifyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type IntegrityVerifyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result IntegrityResult `protobuf:"varint,1,opt,name=result,proto3,enum=lspd.IntegrityResult" json:"result,omitempty"`
}

func (x *IntegrityVerifyReply) Reset() {
	*x = IntegrityVerifyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lspd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrityVerifyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrityVerifyReply) ProtoMessage() {}

func (x *IntegrityVerifyReply) ProtoReflect() protoreflect.Message {
	mi := &file_lspd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrityVerifyReply.ProtoReflect.Descriptor instead.
func (*IntegrityVerifyReply) Descriptor() ([]byte, []int) {
	return file_lspd_proto_rawDescGZIP(), []int{25}
}

func (x *IntegrityVerifyReply) GetResult() IntegrityResult {
	if x != nil {
		return x.Result
	}
	return IntegrityResult_INTEGRITYRESULT_NONE
}

var File_lspd_proto protoreflect.FileDescriptor

var file_lspd_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6c, 0x73,
	0x70, 0x64, 0x22, 0x23, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x33, 0x0a, 0x19, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22,
	0xcf, 0x03, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x73, 0x61,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x79, 0x72, 0x69, 0x61, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46,
	0x65, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x79, 0x72, 0x69, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x73, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x6c, 0x73, 0x70, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61,
	0x78, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x18, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x46, 0x65, 0x65, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x73, 0x77, 0x61, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x2c, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22,
	0x50, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a,
	0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x2c, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6c, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x22,
	0x16, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xe4, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6d, 0x73, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x22, 0x1f,
	0x0a, 0x09, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xd9, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d,
	0x61, 0x72, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x61, 0x79, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x77, 0x61, 0x70, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x16, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x68, 0x74, 0x6c, 0x63, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x68, 0x74, 0x6c, 0x63, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x56, 0x0a,
	0x17, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2e,
	0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xc7,
	0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0d, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x68, 0x75, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x48, 0x75, 0x62, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x17, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61,
	0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0xd2, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x54, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x22, 0x0d, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x66, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x69, 0x74, 0x79, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b,
	0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x56, 0x0a, 0x16, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6c, 0x73,
	0x70, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0x5b, 0x0a, 0x0f, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x14, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x47,
	0x52, 0x49, 0x54, 0x59, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x4e, 0x47, 0x10, 0x02, 0x32, 0x9f, 0x06, 0x0a, 0x10, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x11, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x12, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x18, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x73,
	0x70, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x12, 0x0f, 0x2e, 0x6c, 0x73, 0x70, 0x64,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x1a, 0x0f, 0x2e, 0x6c, 0x73, 0x70,
	0x64, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x10, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e,
	0x65, 0x12, 0x0f, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x1a, 0x1b, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x31, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x0f, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x1a, 0x0f, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1d, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x6c, 0x73, 0x70,
	0x64, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x1a, 0x1b, 0x2e, 0x6c, 0x73,
	0x70, 0x64, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0d, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0f, 0x2e, 0x6c, 0x73,
	0x70, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x1a, 0x11, 0x2e, 0x6c,
	0x73, 0x70, 0x64, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x34, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x0f, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x1a, 0x0f, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x0f, 0x2e, 0x6c, 0x73, 0x70,
	0x64, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x1a, 0x1a, 0x2e, 0x6c, 0x73,
	0x70, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x4c, 0x0a, 0x14, 0x69, 0x6f, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x6c, 0x73, 0x70, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x09, 0x4c, 0x73, 0x70, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x27,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x61, 0x79, 0x75, 0x74,
	0x61, 0x63, 0x6f, 0x2f, 0x4e, 0x61, 0x79, 0x75, 0x74, 0x61, 0x48, 0x75, 0x62, 0x32, 0x4c, 0x73,
	0x70, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lspd_proto_rawDescOnce sync.Once
	file_lspd_proto_rawDescData = file_lspd_proto_rawDesc
)

func file_lspd_proto_rawDescGZIP() []byte {
	file_lspd_proto_rawDescOnce.Do(func() {
		file_lspd_proto_rawDescData = protoimpl.X.CompressGZIP(file_lspd_proto_rawDescData)
	})
	return file_lspd_proto_rawDescData
}

var file_lspd_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_lspd_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_lspd_proto_goTypes = []interface{}{
	(IntegrityResult)(0),              // 0: lspd.IntegrityResult
	(ReportRequest_ReportLevel)(0),    // 1: lspd.ReportRequest.ReportLevel
	(*PingRequest)(nil),               // 2: lspd.PingRequest
	(*PingReply)(nil),                 // 3: lspd.PingReply
	(*ChannelInformationRequest)(nil), // 4: lspd.ChannelInformationRequest
	(*ChannelInformationReply)(nil),   // 5: lspd.ChannelInformationReply
	(*OpenChannelRequest)(nil),        // 6: lspd.OpenChannelRequest
	(*OpenChannelReply)(nil),          // 7: lspd.OpenChannelReply
	(*RegisterPaymentRequest)(nil),    // 8: lspd.RegisterPaymentRequest
	(*RegisterPaymentReply)(nil),      // 9: lspd.RegisterPaymentReply
	(*PaymentInformation)(nil),        // 10: lspd.PaymentInformation
	(*Encrypted)(nil),                 // 11: lspd.Encrypted
	(*RegisterSubmarineRequest)(nil),  // 12: lspd.RegisterSubmarineRequest
	(*RegisterSubmarineReply)(nil),    // 13: lspd.RegisterSubmarineReply
	(*ReceiveSubmarineRequest)(nil),   // 14: lspd.ReceiveSubmarineRequest
	(*ReceiveSubmarineReply)(nil),     // 15: lspd.ReceiveSubmarineReply
	(*NodePair)(nil),                  // 16: lspd.NodePair
	(*QueryRoutesRequest)(nil),        // 17: lspd.QueryRoutesRequest
	(*GetTimeLockDeltaRequest)(nil),   // 18: lspd.GetTimeLockDeltaRequest
	(*GetTimeLockDeltaReply)(nil),     // 19: lspd.GetTimeLockDeltaReply
	(*RegisterUserInfoRequest)(nil),   // 20: lspd.RegisterUserInfoRequest
	(*RegisterUserInfoReply)(nil),     // 21: lspd.RegisterUserInfoReply
	(*ReportRequest)(nil),             // 22: lspd.ReportRequest
	(*ReportReply)(nil),               // 23: lspd.ReportReply
	(*IntegrityNonceRequest)(nil),     // 24: lspd.IntegrityNonceRequest
	(*IntegrityNonceReply)(nil),       // 25: lspd.IntegrityNonceReply
	(*IntegrityVerifyRequest)(nil),    // 26: lspd.IntegrityVerifyRequest
	(*IntegrityVerifyReply)(nil),      // 27: lspd.IntegrityVerifyReply
}
var file_lspd_proto_depIdxs = []int32{
	16, // 0: lspd.QueryRoutesRequest.ignored_pairs:type_name -> lspd.NodePair
	1,  // 1: lspd.ReportRequest.level:type_name -> lspd.ReportRequest.ReportLevel
	0,  // 2: lspd.IntegrityVerifyReply.result:type_name -> lspd.IntegrityResult
	2,  // 3: lspd.LightningService.Ping:input_type -> lspd.PingRequest
	4,  // 4: lspd.LightningService.ChannelInformation:input_type -> lspd.ChannelInformationRequest
	6,  // 5: lspd.LightningService.OpenChannel:input_type -> lspd.OpenChannelRequest
	8,  // 6: lspd.LightningService.RegisterPayment:input_type -> lspd.RegisterPaymentRequest
	11, // 7: lspd.LightningService.RegisterSubmarine:input_type -> lspd.Encrypted
	11, // 8: lspd.LightningService.ReceiveSubmarine:input_type -> lspd.Encrypted
	11, // 9: lspd.LightningService.QueryRoutes:input_type -> lspd.Encrypted
	18, // 10: lspd.LightningService.GetTimeLockDelta:input_type -> lspd.GetTimeLockDeltaRequest
	11, // 11: lspd.LightningService.RegisterUserInfo:input_type -> lspd.Encrypted
	11, // 12: lspd.LightningService.ReportMessage:input_type -> lspd.Encrypted
	11, // 13: lspd.LightningService.IntegrityNonce:input_type -> lspd.Encrypted
	11, // 14: lspd.LightningService.IntegrityVerify:input_type -> lspd.Encrypted
	3,  // 15: lspd.LightningService.Ping:output_type -> lspd.PingReply
	5,  // 16: lspd.LightningService.ChannelInformation:output_type -> lspd.ChannelInformationReply
	7,  // 17: lspd.LightningService.OpenChannel:output_type -> lspd.OpenChannelReply
	9,  // 18: lspd.LightningService.RegisterPayment:output_type -> lspd.RegisterPaymentReply
	11, // 19: lspd.LightningService.RegisterSubmarine:output_type -> lspd.Encrypted
	15, // 20: lspd.LightningService.ReceiveSubmarine:output_type -> lspd.ReceiveSubmarineReply
	11, // 21: lspd.LightningService.QueryRoutes:output_type -> lspd.Encrypted
	19, // 22: lspd.LightningService.GetTimeLockDelta:output_type -> lspd.GetTimeLockDeltaReply
	21, // 23: lspd.LightningService.RegisterUserInfo:output_type -> lspd.RegisterUserInfoReply
	23, // 24: lspd.LightningService.ReportMessage:output_type -> lspd.ReportReply
	11, // 25: lspd.LightningService.IntegrityNonce:output_type -> lspd.Encrypted
	27, // 26: lspd.LightningService.IntegrityVerify:output_type -> lspd.IntegrityVerifyReply
	15, // [15:27] is the sub-list for method output_type
	3,  // [3:15] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_lspd_proto_init() }
func file_lspd_proto_init() {
	if File_lspd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lspd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInformationReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenChannelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterPaymentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encrypted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSubmarineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSubmarineReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveSubmarineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveSubmarineReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimeLockDeltaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimeLockDeltaReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrityNonceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrityNonceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrityVerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lspd_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrityVerifyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lspd_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lspd_proto_goTypes,
		DependencyIndexes: file_lspd_proto_depIdxs,
		EnumInfos:         file_lspd_proto_enumTypes,
		MessageInfos:      file_lspd_proto_msgTypes,
	}.Build()
	File_lspd_proto = out.File
	file_lspd_proto_rawDesc = nil
	file_lspd_proto_goTypes = nil
	file_lspd_proto_depIdxs = nil
}
